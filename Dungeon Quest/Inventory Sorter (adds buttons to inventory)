--[[
	Inventory Sorting Script
	github: https://github.com/Trey13542
--]]


--< Defines >--

local rs = game:GetService('ReplicatedStorage')
local lPlr = game:GetService('Players').LocalPlayer
local pGui = lPlr.PlayerGui


--< Functions >--

function refresh()
	return rs.remotes.reloadInvy:InvokeServer()
end

function sort(path, table, backwards)
	for _,label in pairs(path:GetChildren()) do
		if label:IsA('ImageLabel') then
			local type = label.itemType.Value
			local uniqueNum = label.itemType.uniqueItemNum.Value
			for _,v in pairs(type == 'weapon' and table.weapons or type == 'helmet' and table.helmets or type == 'chest' and table.chests or type == 'ability' and table.abilities) do
				if tonumber(string.sub(_, type == 'weapon' and 8 or type == 'helmet' and 8 or type == 'chest' and 7 or type == 'ability' and 9)) == uniqueNum then
					if v.rarity == 'mythical' then
						label.LayoutOrder = backwards and 6000 + v.levelReq or 1000 - v.levelReq
					elseif v.rarity == 'legendary' then 
						label.LayoutOrder = backwards and 5000 + v.levelReq or 2000 - v.levelReq
					elseif v.rarity == 'epic' then 
						label.LayoutOrder = backwards and 4000 + v.levelReq or 3000 - v.levelReq
					elseif v.rarity == 'rare' then 
						label.LayoutOrder = backwards and 3000 + v.levelReq or 4000 - v.levelReq
					elseif v.rarity == 'uncommon' then 
						label.LayoutOrder = backwards and 2000 + v.levelReq or 5000 - v.levelReq
					elseif v.rarity == 'common' then 
						label.LayoutOrder = backwards and 1000 + v.levelReq or 6000 - v.levelReq
					end
				end
			end
		end
	end
end


--< Edit Inventory >--

function editUI(path)
	local xFrame = path.xFrame
	
	local test = xFrame:Clone()
	--pcall(function() test.ImageLabel:Destroy() end)
	test.xButton.TextStrokeTransparency = 1
	test.xButton.TextSize = 18
	test.xButton.TextScaled = false
	test.xButton.LocalScript:Destroy()
	
	local rarity_descending = test:Clone()
	local rarity_ascending = test:Clone()
	
	rarity_descending.Name = 'descend'
	rarity_descending.Parent = path
	rarity_descending.xButton.Text = 'sort rarity descending'
	rarity_descending.Position = UDim2.new(0.8, 0.0, 0.015, 0.0)
	rarity_descending.Size =  UDim2.new(0.1, 0.0, 0.09, 0.0)
	rarity_descending.xButton.MouseButton1Click:Connect(function()
		if path:FindFirstChild('innerFrame') then
			sort(path.innerFrame.rightSideFrame.ScrollingFrame, refresh(), false)
		elseif path:FindFirstChild('innerBackground') then
			sort(path.innerBackground.rightSideFrame.ScrollingFrame, refresh(), false)
		end
	end)
	
	rarity_ascending.Name = 'ascend'
	rarity_ascending.Parent = path
	rarity_ascending.xButton.Text = 'sort rarity ascending'
	rarity_ascending.Position = UDim2.new(0.7, 0.0, 0.015, 0.0)
	rarity_ascending.Size =  UDim2.new(0.1, 0.0, 0.09, 0.0)
	rarity_ascending.xButton.MouseButton1Click:Connect(function()
		if path:FindFirstChild('innerFrame') then
			sort(path.innerFrame.rightSideFrame.ScrollingFrame, refresh(), true)
		elseif path:FindFirstChild('innerBackground') then
			sort(path.innerBackground.rightSideFrame.ScrollingFrame, refresh(), true)
		end
	end)
	
	test:Remove()
end
editUI(pGui.inventory.mainBackground)

while wait() do
	if pGui:FindFirstChild('blacksmith') and not pGui.blacksmith.Frame:FindFirstChild('ascend') then 
		editUI(pGui.blacksmith.Frame)
	end
	if pGui:FindFirstChild('sellShop') and not pGui.sellShop.Frame:FindFirstChild('ascend') then 
		editUI(pGui.sellShop.Frame) 
	end
	if pGui:FindFirstChild('tradingGui') and not pGui.tradingGui.Frame:FindFirstChild('ascend') then 
		editUI(pGui.tradingGui.Frame) 
	end
end
