--[[
	docs: https://treythehot.gitbook.io
	github: https://github.com/Trey13542
--]]
if not hookmetamethod or not checkcaller or not hookfunction or not getnamecallmethod then
	print('exploit not supported')
	return
end



--< tables >--

	--// services \\--
	if not _G.WS then
		_G.ws = game:GetService('Workspace')
		_G.players = game:GetService('Players')
		_G.rs = game:GetService('ReplicatedStorage')
		_G.uis = game:GetService('UserInputService')
		_G.http = game:GetService('HttpService')
		_G.run = game:GetService('RunService')
		_G.tween = game:GetService('TweenService')
	end

	--// local player \\--
	_G.lPlr = _G.players.LocalPlayer
	_G.lChar = _G.lPlr.Character or nil
	if _G.lChar then
		_G.lHum = _G.lChar:WaitForChild('Humanoid', 5) or nil
		_G.lHRP = _G.lChar:WaitForChild('HumanoidRootPart', 5) or nil
	end
	
	_G.mouse = _G.lPlr:GetMouse()
	_G.cam = _G.ws.CurrentCamera

	--// connections \\--
	_G.connections = {}



--< functions >--
	
	--// random useful stuff \\--
	_G.removeFromTable = function(t, o)
		table.foreach(t, function(_, obj)
			if obj == o then table.remove(t, _) end
		end)
	end
	
	_G.getDist = function(pos1, pos2)
		return (pos1 - pos2).Magnitude
	end
	_G.w2s = function(pos)
		return _G.cam:WorldToViewportPoint(pos)
	end
	
	_G.validPlayer = function(plr)
		return plr and _G.players:FindFirstChild(plr.Name) and plr.Character and plr.Character:FindFirstChild('HumanoidRootPart') and plr.Character:FindFirstChild('Humanoid') and plr.Character:FindFirstChild('Humanoid').Health > 0
	end
	_G.validPart = function(part)
		return part and part.Parent
	end
	
	--// keep _G.lPlr and stuff updated \\--
	table.insert(_G.connections, _G.lPlr.CharacterAdded:Connect(function(char)
		pcall(function()
			_G.lChar = char
			_G.lHum = char:WaitForChild('Humanoid', 5)
			_G.lHRP = char:WaitForChild('HumanoidRootPart', 5)
			
			local conn
			conn = _G.lChar:WaitForChild('Humanoid', 1).Died:Connect(function()
				_G.lChar = nil
				_G.lHum = nil
				_G.lHRP = nil
			end)
			table.insert(_G.Connections, conn)
		end)
	end))



--< hooking >--
	
	--// define stuff \\--
	if _G.hooks_init then return end
	_G.hooks_init = true
	
	local indexCache = {}
	local namecallCache = {}
	local lockedCache = {}
	local remoteCache = {}
	
	
	
	--// hook __index to add .hook and .unhook (and .lock and .unlock but functionality for it is added in __newindex) \\--
	local oIndex
	oIndex = hookmetamethod(game, '__index', function(self, key, ...)
		local args = {...}
		
		if checkcaller() then
			local fn = tostring(key) and string.lower(tostring(key)) or ''
			
			-- .hook
			if fn == 'hook' then
				return function(property, value, callback)
					if not indexCache[self] then indexCache[self] = {} end
				
					if indexCache[self][property] then
						print(('[hook] %s.%s is already hooked.'):format(tostring(self), tostring(property)))
					else
						indexCache[self][property] = { self, property, value, callback or function(v) end }
						print(('[hook] %s.%s hooked.'):format(tostring(self), tostring(property)))
					end
				end
			end
			
			-- .unhook
			if fn == 'unhook' then
				return function(property)
					if indexCache[self][property] then
						indexCache[self][property] = nil
						print(('[hook] %s.%s unhooked.'):format(tostring(self), tostring(property)))
					else 
						print(('[hook] %s.%s is not hooked.'):format(tostring(self), tostring(property)))
					end
				end
			end
			
			-- rhook
			if fn == 'rhook' then
				return function(name, callback)
					if not remoteCache[self] then remoteCache[self] = {} end
				
					if remoteCache[self][name] then
						print(('[hook] %s is already hooked.'):format(tostring(name)))
					else
						remoteCache[self][name] = { self, name, callback }
						print(('[hook] %s hooked.'):format(tostring(name)))
					end
				end
			end
			
			-- unrhook
			if fn == 'unrhook' then
				return function(name)
					if remoteCache[self][name] then
						remoteCache[self][name] = nil
						print(('[hook] %s unhooked.'):format(tostring(name)))
					else
						print(('[hook] %s is not hooked.'):format(tostring(name)))
					end
				end
			end
			
			-- .lock
			if fn == 'lock' then
				return function(property, value)
					if not lockedCache[self] then lockedCache[self] = {} end
					
					if lockedCache[self][property] then
						print(('[hook] %s.%s is already locked.'):format(tostring(self), tostring(property)))
					else
						lockedCache[self][property] = { self, property, value }
						print(('[hook] %s.%s locked to %s.'):format(tostring(self), tostring(property), tostring(value)))
					end
				end
			end
			
			-- .unlock
			if fn == 'unlock' then
				return function(property)
					if lockedCache[self][property] then
						lockedCache[self][property] = nil
						print(('[hook] %s.%s unlocked.'):format(tostring(self), tostring(property)))	
					else
						print(('[hook] %s.%s is not locked.'):format(tostring(self), tostring(property)))
					end
				end
			end
			
			-- .protect
			if fn == 'protect' then
				return function()
					if _G.protected[self] then
						print(('[protect] %s is already protected.'):format(tostring(self)))
					else
						table.insert(_G.protected, self)
						print(('[protect] %s protected.'):format(tostring(self)))
					end
				end
			end
			
			-- .unprotect
			if fn == 'unprotect' then
				return function()
					if _G.protected[self] then
						table.remove(_G.protected, table.find(_G.protected, self))
						print(('[protect] %s unprotected.'):format(tostring(self)))
					else
						print(('[protect] %s is not protected.'):format(tostring(self)))
					end
				end
			end
		end
		
		local selfHook = indexCache[self] or nil
		if selfHook and type(selfHook) == 'table' then
			local hook = selfHook[key]
			if hook and hook[1] and hook[2] and hook[3] then
				if type(hook[2]) == 'string' and hook[2] == key then
					if hook[4] then hook[4]('tried getting value') end
					return hook[3]
				end
			end
		end
		
		return oIndex(self, key, ...)
	end)
	
	
	
	--// hook __newindex to add .lock and .unlock \\--
	local oNewIndex
	oNewIndex = hookmetamethod(game, '__newindex', function(self, key, value)
		local selfHook = lockedCache[self] or nil
		if selfHook and type(selfHook) == 'table' then
			local hook = selfHook[key]
			if hook and hook[1] and hook[2] and hook[3] then
				if type(hook[2]) == 'string' and hook[2] == key then
					value = hook[3]
				end
			end
		end
		
		local selfHook2 = indexCache[self] or nil
		if selfHook2 and type(selfHook2) == 'table' then
			local hook = selfHook2[key]
			if hook and hook[1] and hook[2] and hook[3] then
				if type(hook[2]) == 'string' and hook[2] == key then
					if hook[4] then hook[4]('tried setting value') end
				end
			end
		end
	
		return oNewIndex(self, key, value)
	end)
	
	
	
	--// hook __namecall to add .hook and .unhook to RemoteEvents \\--
	local oNamecall
	oNamecall = hookmetamethod(game, '__namecall', function(self, key, ...)
		local args = {...}
		local method = getnamecallmethod()
		
		if method == 'FireServer' or method == 'InvokeServer' then
			local selfHook = remoteCache[self]  or nil
			if selfHook and type(selfHook) == 'table' then
				local hook = selfHook[self.Name]
				if hook and hook[1] and hook[2] and hook[3] then
					if type(hook[2]) == 'string' and hook[2] == self.Name then
						hook[3](args)
					end
				end
			end
		end
		
		return oNamecall(self, key, unpack(args))
	end)
	
	print('[hook] hooks initialized.')
